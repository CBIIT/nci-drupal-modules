<?php

// todo: Make sure that the access for the different transitions for each role is checked.
// so we should not list the possible states if a specific role cannot access that.
// Help needed! / bobodrone

/**
 * Implements hook_menu()
 * @return array
 */
function wbm_default_state_menu() {
  $items = array();
  $items['admin/config/workbench/moderation/default-state'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Default state per role',
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wbm_default_state_form'),
  );

  return $items;
}

/**
 * Settings form
 * @return type
 */
function wbm_default_state_form() {

  $form = array();
  $roles = user_roles();
  module_load_include('module', 'workbench_moderation');
  $states = workbench_moderation_states();

  $moderated_types = wbm_default_state_get_moderated_node_types();

  $states_options['default_state'] = 'Default state';
  foreach($states as $state) {
    $states_options[$state->name] = $state->label;
  }
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'wbm_default_state') . '/wbm_default_state.css',
  );
  $form['node_types'] = array(
    '#type' => 'item',
    '#markup' => '<h3>Default states per role</h3><p>A user with a role that is set to a default state will always have that state preselected. If a user has more than one role, the grant is based on the role weight/order, with highest <a href="/admin/people/permissions/roles">weight</a> selected.</p><p>NOTE: The configuration below does not respect/filter the state that role can use!</p>',
  );
  foreach($moderated_types as $node_type_name => $node_type_object) {
    $form[$node_type_name] = array(
      '#type' => 'vertical_tabs',
      '#title' => t($node_type_object->name) . ' ('. $node_type_name . ')',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form[$node_type_name]['role_types'] = array(
      '#type' => 'item',
      '#markup' => '<h4>' . t($node_type_object->name) . ' ('. $node_type_name . ')' . '</h4>',
    );

    foreach($roles as $rid => $role) {
      if ($role != 'anonymous user') {
        $role_name = strtr($role, ' ', '_');
        $form[$node_type_name][$node_type_name . '_' . $role_name . '_label'] = array(
          '#type' => 'fieldset',
          '#attributes' => array('class' => array('wbm_default_state_role')),
          '#title' => $role,
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        );
        $form[$node_type_name][$node_type_name . '_' . $role_name . '_label']['role_per_state'] = array(
          '#type' => 'item',
          '#markup' => '<p>Select the default state per role</p>',
        );
        $form[$node_type_name][$node_type_name . '_' . $role_name . '_label'][$node_type_name . '_' . $role_name . '_state'] = array(
          '#type' => 'radios',
          '#title' => 'States',
          '#attributes' => array('class' => array('wbm_default_state_option')),
          '#default_value' => variable_get($node_type_name . '_' . $role_name . '_state', 'default_state'),
          '#options' => $states_options,
        );
      }
    }
  }
  return system_settings_form($form);
}

/**
 * Get all moderated node types.
 * @return type
 */
function wbm_default_state_get_moderated_node_types() {
  $moderated_types = array();
  $node_types = node_type_get_types();
  foreach($node_types as $node_type_name => $node_type_object) {
    if (!workbench_moderation_node_type_moderated($node_type_name)) {
      continue;
    }
    $moderated_types[$node_type_name] = $node_type_object;
  }
  if (!empty($moderated_types)) {
    return $moderated_types;
  }
  return FALSE;
}

/**
 * Alter the node form for the different node types.
 * @global type $user
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 */
function wbm_default_state_form_alter(&$form, &$form_state, $form_id) {
  $default_states_types = wbm_default_state_get_moderated_node_types();
  if (!empty($default_states_types) && is_array($default_states_types) && in_array($form_id, array_map('_wbm_default_state_append_node_form', array_keys($default_states_types)))) {
    global $user;
    $default_state = wbm_default_state_check_moderation_state($form['type']['#value'], $user);
    if ($default_state == 'published') {
      $message[] = array(
        'label' => 'New content',
        'message' => 'Content will be published directly.',
      );
      wbm_default_state_set_message($message);
    }

    if (($default_state != FALSE) && arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'service') {
      $form['revision_information']['workbench_moderation_state_new']['#default_value'] = $default_state;
    }
    $node = node_load(arg(1));
    
    if (($default_state != FALSE) && arg(0) == 'node' && @$node->type == 'service' && arg(2) == 'edit' && !empty($form['revision_information']['workbench_moderation_state_new']['#options']) && in_array($default_state, array_keys($form['revision_information']['workbench_moderation_state_new']['#options']))) {
      $form['revision_information']['workbench_moderation_state_new']['#default_value'] = $default_state;
      $form['workbench_moderation_state_current']['#value'] = $node->workbench_moderation['current']->state;
    }
    
  }
}

function wbm_default_state_check_moderation_state($node_type, $user) {
  $default_state = array();
  $roles = $user->roles;
  $weight = 0;
  foreach($roles as $rid => $role) {
    $role_name = strtr($role, ' ', '_');
    $roleobj = user_role_load($rid);
    if ($roleobj->weight > $weight) {
      $weight = $roleobj->weight;
    }
    if (variable_get($node_type . '_' . $role_name . '_state', '') !== '' && variable_get($node_type . '_' . $role_name . '_state', '') !== 'Default state') {
      $default_state[$roleobj->weight] = variable_get($node_type . '_' . $role_name . '_state', '');
    }
  }
  if (empty($default_state[$weight])) {
    return FALSE;
  }
  return $default_state[$weight];
}

/**
 *
 * @staticvar array $messages
 * @param type $new_messages
 * @return type
 */
function wbm_default_state_set_message($new_messages = array()) {
  static $messages = array();
  $messages = array_merge($messages, $new_messages);
  return $messages;
}

/**
 * Implements hook_block_view_workbench_block().
 *
 * Show the editorial status of this node.
 */
function wbm_default_state_workbench_block() {
 $output = array();
  foreach (wbm_default_state_set_message() as $message) {
    $output[] = t('!label: <em>!message</em>', array('!label' => $message['label'], '!message' => $message['message']));
  }

  return $output;
}

/**
 * A 'Do not do this at home' hack! Ugly as light beer.
 * @param string $page
 */
function wbm_default_state_page_alter(&$page) {
  if (isset($page['content']['workbench_block']['#markup'])) {
    if ($page['content']['workbench_block']['#markup'] == '<div class="workbench-info-block">New content: <em>Your draft will be placed in moderation.</em><br />New content: <em>Content will be published directly.</em></div>') {
      $page['content']['workbench_block']['#markup'] = '<div class="workbench-info-block">New content: <em>Content will be published directly.</em></div>';
    }
  }
}


/**
 * Helper function for form_alter
 * @param type $node_type
 * @return type
 */
function _wbm_default_state_append_node_form($node_type) {
  return $node_type . '_node_form';
}